blueprint:
  name: Theatre Mode
  description: >

    **Features**

    - activates playing or paused scene depending on the media player state
    
    - stores the states of the entities of the playing scene before it gets activated and restores states after you finish the movie

    - transition time for switching scenes


    **Help & FAQ**: [Scene based theatre mode](https://community.home-assistant.io/t/zone-based-notification-custom-action-extended)


    **Version**: 1.0

  source_url: "https://github.com/panhans/homeassistant/blob/main/blueprints/automation/panhans/theatre_mode.yaml"
  domain: automation
  input:
          
    media_player:
      name: Media Player
      description: Media player which triggers automation.
      selector:
        entity:
          filter:
            domain: media_player

    scene_playing:
      name: Play Scene
      description: Activated when playing
      selector:
        entity:
          filter:
            domain: scene

    scene_paused:
      name: Pause Scene
      description: Activated when paused
      selector:
        entity:
          filter:
            domain: scene

    reaction_time:
      name: Reaction time
      description: Time (seconds) the player must be in the state before the scenes get triggered.
      default: 2
      selector:
        number:
          min: 1
          max: 10
          step: 1
          mode: slider

    transition:
      name: Transition
      description: Transition time for scenes in seconds.
      default: 1
      selector:
        number:
          min: 1
          max: 10
          step: 1
          mode: slider

variables:
  scene_uuid_dim: 'ebe235c62de111eda2610242ac120002'
  scene_playing: !input scene_playing
  scene_entities: "{{ state_attr(scene_playing,'entity_id') }}"
  media_player: !input media_player

trigger:
  - platform: state
    entity_id: !input media_player
    from: 
      - "idle"
      - "off"
      - "stopped"
      - "standby"
      - "unknown"
      - "unavailable"
    to: "playing"
    id: create_scene
    for:
      seconds: !input reaction_time
      
  - platform: state
    entity_id: !input media_player
    from: "playing"
    to: "paused"
    id: paused
    for:
      seconds: !input reaction_time
      
  - platform: state
    entity_id: !input media_player
    to: "playing"
    from: "paused"
    id: playing
    for:
      seconds: !input reaction_time
      
  - platform: state
    entity_id: !input media_player
    to:
      - "idle"
      - "off"
      - "stopped"
      - "standby"
      - "unknown"
      - "unavailable"
    id: stopped
    for:
      seconds: !input reaction_time
    
action:
  - if:
    - condition: trigger
      id: create_scene
    then:
    - service: scene.create
      data:
        scene_id: "{{ scene_uuid_dim }}"
        snapshot_entities: "{{ scene_entities }}"
    - delay:
        seconds: 2
    - service: scene.turn_on
      data:
        transition: !input transition
      target:
        entity_id: !input scene_playing

  # play form paused -> scene aktivieren
  - if:
    - condition: trigger
      id: playing
    then:
      - service: scene.turn_on
        data:
          transition: !input transition
        target:
          entity_id: !input scene_playing

  - if:
    - condition: trigger
      id: paused
    then:
      - service: scene.turn_on
        data:
          transition: !input transition
        target:
          entity_id: !input scene_paused

  - if:
    - condition: trigger
      id: stopped
    then:
      - service: scene.turn_on
        data:
          transition: !input transition
        target:
          entity_id: "scene.{{ scene_uuid_dim }}"

mode: queued
